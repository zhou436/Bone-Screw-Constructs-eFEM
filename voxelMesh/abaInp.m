function abaInp(fileName, abaData)
% build Abaqus inp file
% Convert 3d image to voxel-based 8-node mesh
% input nodeCoor:  node list combined the nodes number and coordinates (x,y,z)
% input eleCell:   element cell, (n,10) [element number, intensity, nodes(8)]
% input eleType:   element types (e.g. C3D8, C3D8R)
% input precision: precision of node coordinates
% input fileName:  filename of the output inp file

% fileName = 'printInpTemp';
fid=fopen(sprintf('%s.inp',fileName),'wW');
% ------------------------------------------------------------------------
% Print Heading
headingKWs = [...
    '*Heading\n'...
    '** Job name: Job-1 Model name: contiOpti\n'...
    '** Generated by: Abaqus/CAE 2020\n'...
    '*Preprint, echo=NO, model=NO, history=NO, contact=NO\n'...
    ];
fprintf(fid, headingKWs);
fprintf(fid, '** \n');
fprintf(fid, '** ----------------------------------------------------------------\n');

% Print Part
fprintf(fid, '** ----------------------------------------------------------------\n');
fprintf(fid, '**\n');
fprintf(fid, '** PARTS\n');
fprintf(fid, '**\n');
for ii=1: size(abaData.Parts,2)
    fprintf(fid, [...
    '**\n'...
    '*Part, name=%s\n'...
    '*End Part\n'...
    '**\n'...
    ], abaData.Parts{ii});
end
fprintf(fid, '** \n');
fprintf(fid, '** ----------------------------------------------------------------\n');
fprintf(fid, [...
    '**\n'...
    '** ASSEMBLY\n'...
    '**\n'...
    '*Assembly, name=Assembly\n'...
    '**\n'...
    ]);

abaInpPart(fid, abaData.Bone);
abaInpPart(fid, abaData.Screw);

% Print Sets for BC and output
abaInpSet(fid, abaData.Bone, abaData.Screw);

fprintf(fid,'*End Assembly\n');
fprintf(fid, '** \n');
fprintf(fid, '** ----------------------------------------------------------------\n');

% Print Element controls
abaInpEleCon(fid, abaData.Bone);
abaInpEleCon(fid, abaData.Screw);

% Print Amplitudes
abaInpAmp(fid);

% Print Material properties (CDP)
abaInpMatCDP(fid, abaData.Bone.MAT);

% Print Material properties (Linear Elastic)
abaInpMatLE(fid, abaData.Screw.MAT);

% Print interactions
abaInpInteraction(fid, abaData.fricCoeef);

% Print Step
abaInpStep(fid, abaData.mSFactor);

% Print Boundary conditions (BC)
abaInpBC(fid, abaData.displacement);

% Print Outputs
abaInpOutReq(fid);

fclose(fid);
disp('Check the inp file!');
end